---
import classy from '@utils/classy'

import footerTriangle from "@icons/footerTriangle.svg?raw"

import Icon from "@elements/Icon.astro"

const {
  url,
  color = '',
  big = false,
  mini = false,
  rounded = false,
  icon = false,
  header = false,
  nav = false,
  footer = false,
  wrapClasses = '',
  class : className = '',
  } = Astro.props

const isNav = footer || header || nav

let linkClasses = {}
let linkClassesArr : string[] = ['k-link antialiased']
// let linkClasses = classy([
//    && color !== "invert" && 'shadow',
//    && color === 'blue' ? 'bg-blue'
//   : color === 'invert' ? 'text-blue bg-white border-solid border border-blue'
//   : color === 'metal' ? 'bg-metal'
//   : color === 'red' ? 'bg-red'
//   : color === 'white' ? 'text-metal bg-white'
//   : color === 'yellow' && 'bg-yellow text-white',
//   (color && color !== 'invert' && color !== 'white') && 'text-white',
//   className,
// ])

if ( footer ){
  linkClassesArr.push('typo-body-m text-neutral-200 flex items-center')
} else if ( header) {
  linkClassesArr.push('typo-header-xxs')
  linkClassesArr.push(url === Astro.url.pathname && header && 'font-black k-active')
  linkClassesArr.push(color ? `text-${color}` : 'text-neutral-500')
} else if ( nav ) {
  linkClassesArr.push('text-blue typo-button-s')
} else if ( mini ) {
  linkClassesArr.push('typo-button-s')
  linkClassesArr.push('flex items-center')
  linkClassesArr.push(color ? `text-${color}` : 'text-white')
} else {
  linkClassesArr.push('font-semibold typo-button-s')
}

if ( big ){
  linkClassesArr.push('typo-button-l py-3 px-4')
} else {
  linkClassesArr.push('py-2 px-3')
}

if ( rounded ){
  linkClassesArr.push('rounded-full')
} else {
  linkClassesArr.push('rounded-sm')
}

if ( color === 'invert'){
  linkClassesArr.push('text-blue bg-white border-solid border border-blue')
} else if ( color === 'metal'){
  linkClassesArr.push('bg-metal text-white')
} else if ( color === 'red'){
  linkClassesArr.push('bg-red text-white')
} else if ( color === 'white'){
  linkClassesArr.push('bg-white text-metal')
} else if ( color === 'yellow'){
  linkClassesArr.push('bg-yellow text-white')
} else if ( color === 'blue'){
  linkClassesArr.push('bg-blue text-white')
}

if ( !!color && color !== 'invert'){
  linkClassesArr.push('shadow')
}

linkClasses = classy([...linkClassesArr, className])

const linkContentClasses = classy([
  'k-link-content-wrapper',
  ( isNav || mini ) && url !== '#' && 'k-decoration-under',
  footer && 'ml-3.5',
  wrapClasses
])

let decoratorBgColor = nav ? '#59CCD9':
  mini ? '#F8FAFC' :
  header ? '#3C5368' :
  footer && '#CBD7E1'

if ( color === 'cyan'){
  linkClasses = classy([
    'typo-body-m text-cyan-soft k-decoration-under antialiased',
    className
  ])

  decoratorBgColor = '#E6F7F9'
}

---
{ url === '#'
  ?
  <div {...linkClasses} >
    { nav && <span>{'<'}</span>}
    { footer && !Boolean(icon) && <Icon icon={footerTriangle}/>}
    { !footer && Boolean(icon) && <Icon icon={icon}/>}
    <span {...linkContentClasses}>
      <slot/>
    </span>
    { mini && <span class="ml-2">{'>'}</span>}
  </div>
  :
  <a href ={ url } {...linkClasses} >
  { nav && <span>{'<'}</span>}
  { footer && !Boolean(icon) && <Icon icon={footerTriangle}/>}
  { !footer && Boolean(icon) && <Icon icon={icon}/>}
    <span {...linkContentClasses}>
      <slot/>
    </span>
    { mini && <span class="ml-2">{'>'}</span>}
  </a>
}
<style define:vars={{decoratorBgColor}}>
  .k-link-content-wrapper.k-decoration-under {
    position: relative;
    &:before {
      position: absolute;
      content: "";
      left: 0;
      bottom: 0;
      width: 0;
      height: 2px;
      background: var(--decoratorBgColor);
      transition: width 200ms ease;
    }
  }

  :not(.k-active){
      & .k-decoration-under:hover{
      &:before {
        width: 100%;
      }
    }
  }

  & .shadow {
    box-shadow: 4px 4px 4px 2px #2D3E4E33;
  }
</style>
